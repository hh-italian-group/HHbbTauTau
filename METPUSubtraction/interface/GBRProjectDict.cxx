//
// File generated by rootcint at Fri May 30 13:44:50 2014

// Do NOT change. Changes will be lost next time file is generated
//

#pragma once

#define R__DICTIONARY_FILENAME GBRProjectDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "GBRProjectDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
      //   ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::GBRForest GBRForest;
      #else
      class GBRForest  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~GBRForest() throw() {};
         double fInitialResponse; //
         vector< ::GBRTree > fTrees; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::GBRTree GBRTree;
      #else
      class GBRTree  {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~GBRTree() throw() {};
         vector< unsigned char > fCutIndices; //
         vector< float > fCutVals; //
         vector< int > fLeftIndices; //
         vector< int > fRightIndices; //
         vector< float > fResponses; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void GBRForest_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void GBRForest_Dictionary();
   static void *new_GBRForest(void *p = 0);
   static void *newArray_GBRForest(Long_t size, void *p);
   static void delete_GBRForest(void *p);
   static void deleteArray_GBRForest(void *p);
   static void destruct_GBRForest(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GBRForest*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::GBRForest) == sizeof(::ROOT::Shadow::GBRForest));
      ::GBRForest *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::GBRForest),0);
      static ::ROOT::TGenericClassInfo 
         instance("GBRForest", "./GBRForest.h", 16,
                  typeid(::GBRForest), DefineBehavior(ptr, ptr),
                  &GBRForest_ShowMembers, &GBRForest_Dictionary, isa_proxy, 4,
                  sizeof(::GBRForest) );
      instance.SetNew(&new_GBRForest);
      instance.SetNewArray(&newArray_GBRForest);
      instance.SetDelete(&delete_GBRForest);
      instance.SetDeleteArray(&deleteArray_GBRForest);
      instance.SetDestructor(&destruct_GBRForest);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GBRForest*)
   {
      return GenerateInitInstanceLocal((::GBRForest*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GBRForest*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void GBRForest_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::GBRForest*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void GBRTree_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void GBRTree_Dictionary();
   static void *new_GBRTree(void *p = 0);
   static void *newArray_GBRTree(Long_t size, void *p);
   static void delete_GBRTree(void *p);
   static void deleteArray_GBRTree(void *p);
   static void destruct_GBRTree(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GBRTree*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::GBRTree) == sizeof(::ROOT::Shadow::GBRTree));
      ::GBRTree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::GBRTree),0);
      static ::ROOT::TGenericClassInfo 
         instance("GBRTree", "./GBRTree.h", 15,
                  typeid(::GBRTree), DefineBehavior(ptr, ptr),
                  &GBRTree_ShowMembers, &GBRTree_Dictionary, isa_proxy, 4,
                  sizeof(::GBRTree) );
      instance.SetNew(&new_GBRTree);
      instance.SetNewArray(&newArray_GBRTree);
      instance.SetDelete(&delete_GBRTree);
      instance.SetDeleteArray(&deleteArray_GBRTree);
      instance.SetDestructor(&destruct_GBRTree);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GBRTree*)
   {
      return GenerateInitInstanceLocal((::GBRTree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GBRTree*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void GBRTree_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::GBRTree*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
namespace ROOT {
   void GBRForest_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class GBRForest.
      typedef ::ROOT::Shadow::GBRForest ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::GBRForest*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInitialResponse", &sobj->fInitialResponse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrees", (void*)&sobj->fTrees);
      R__insp.InspectMember("vector<GBRTree>", (void*)&sobj->fTrees, "fTrees.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GBRForest(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GBRForest : new ::GBRForest;
   }
   static void *newArray_GBRForest(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GBRForest[nElements] : new ::GBRForest[nElements];
   }
   // Wrapper around operator delete
   static void delete_GBRForest(void *p) {
      delete ((::GBRForest*)p);
   }
   static void deleteArray_GBRForest(void *p) {
      delete [] ((::GBRForest*)p);
   }
   static void destruct_GBRForest(void *p) {
      typedef ::GBRForest current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GBRForest

//______________________________________________________________________________
namespace ROOT {
   void GBRTree_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class GBRTree.
      typedef ::ROOT::Shadow::GBRTree ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::GBRTree*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutIndices", (void*)&sobj->fCutIndices);
      R__insp.InspectMember("vector<unsigned char>", (void*)&sobj->fCutIndices, "fCutIndices.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutVals", (void*)&sobj->fCutVals);
      R__insp.InspectMember("vector<float>", (void*)&sobj->fCutVals, "fCutVals.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLeftIndices", (void*)&sobj->fLeftIndices);
      R__insp.InspectMember("vector<int>", (void*)&sobj->fLeftIndices, "fLeftIndices.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRightIndices", (void*)&sobj->fRightIndices);
      R__insp.InspectMember("vector<int>", (void*)&sobj->fRightIndices, "fRightIndices.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fResponses", (void*)&sobj->fResponses);
      R__insp.InspectMember("vector<float>", (void*)&sobj->fResponses, "fResponses.", false);
   }

}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GBRTree(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GBRTree : new ::GBRTree;
   }
   static void *newArray_GBRTree(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::GBRTree[nElements] : new ::GBRTree[nElements];
   }
   // Wrapper around operator delete
   static void delete_GBRTree(void *p) {
      delete ((::GBRTree*)p);
   }
   static void deleteArray_GBRTree(void *p) {
      delete [] ((::GBRTree*)p);
   }
   static void destruct_GBRTree(void *p) {
      typedef ::GBRTree current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GBRTree

namespace ROOT {
   void vectorlEGBRTreegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEGBRTreegR_Dictionary();
   static void *new_vectorlEGBRTreegR(void *p = 0);
   static void *newArray_vectorlEGBRTreegR(Long_t size, void *p);
   static void delete_vectorlEGBRTreegR(void *p);
   static void deleteArray_vectorlEGBRTreegR(void *p);
   static void destruct_vectorlEGBRTreegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<GBRTree>*)
   {
      vector<GBRTree> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<GBRTree>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<GBRTree>", -2, "prec_stl/vector", 49,
                  typeid(vector<GBRTree>), DefineBehavior(ptr, ptr),
                  0, &vectorlEGBRTreegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<GBRTree>) );
      instance.SetNew(&new_vectorlEGBRTreegR);
      instance.SetNewArray(&newArray_vectorlEGBRTreegR);
      instance.SetDelete(&delete_vectorlEGBRTreegR);
      instance.SetDeleteArray(&deleteArray_vectorlEGBRTreegR);
      instance.SetDestructor(&destruct_vectorlEGBRTreegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<GBRTree> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<GBRTree>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEGBRTreegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<GBRTree>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEGBRTreegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<GBRTree> : new vector<GBRTree>;
   }
   static void *newArray_vectorlEGBRTreegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<GBRTree>[nElements] : new vector<GBRTree>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEGBRTreegR(void *p) {
      delete ((vector<GBRTree>*)p);
   }
   static void deleteArray_vectorlEGBRTreegR(void *p) {
      delete [] ((vector<GBRTree>*)p);
   }
   static void destruct_vectorlEGBRTreegR(void *p) {
      typedef vector<GBRTree> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<GBRTree>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "prec_stl/vector", 49,
                  typeid(vector<int>), DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<int>

namespace ROOT {
   void vectorlEunsignedsPchargR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPchargR_Dictionary();
   static void *new_vectorlEunsignedsPchargR(void *p = 0);
   static void *newArray_vectorlEunsignedsPchargR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPchargR(void *p);
   static void deleteArray_vectorlEunsignedsPchargR(void *p);
   static void destruct_vectorlEunsignedsPchargR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned char>*)
   {
      vector<unsigned char> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned char>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned char>", -2, "vector.dll", 0,
                  typeid(vector<unsigned char>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPchargR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned char>) );
      instance.SetNew(&new_vectorlEunsignedsPchargR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPchargR);
      instance.SetDelete(&delete_vectorlEunsignedsPchargR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPchargR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPchargR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned char> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned char>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPchargR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned char>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPchargR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned char> : new vector<unsigned char>;
   }
   static void *newArray_vectorlEunsignedsPchargR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned char>[nElements] : new vector<unsigned char>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPchargR(void *p) {
      delete ((vector<unsigned char>*)p);
   }
   static void deleteArray_vectorlEunsignedsPchargR(void *p) {
      delete [] ((vector<unsigned char>*)p);
   }
   static void destruct_vectorlEunsignedsPchargR(void *p) {
      typedef vector<unsigned char> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned char>

/********************************************************
* GBRProjectDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableGBRProjectDict();

extern "C" void G__set_cpp_environmentGBRProjectDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("GBRProjectHeaders.h");
  G__cpp_reset_tagtableGBRProjectDict();
}
#include <new>
extern "C" int G__cpp_dllrevGBRProjectDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* GBRForest */
static int G__GBRProjectDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GBRForest* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GBRForest[n];
     } else {
       p = new((void*) gvp) GBRForest[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GBRForest;
     } else {
       p = new((void*) gvp) GBRForest;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GBRProjectDictLN_GBRForest));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GBRProjectDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GBRForest* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GBRForest(*(GBRForest*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) GBRForest(*(GBRForest*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GBRProjectDictLN_GBRForest));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GBRForest G__TGBRForest;
static int G__GBRProjectDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GBRForest*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GBRForest*) (soff+(sizeof(GBRForest)*i)))->~G__TGBRForest();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GBRForest*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GBRForest*) (soff))->~G__TGBRForest();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GBRProjectDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GBRForest* dest = (GBRForest*) G__getstructoffset();
   *dest = *(GBRForest*) libp->para[0].ref;
   const GBRForest& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GBRTree */
static int G__GBRProjectDict_169_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GBRTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GBRTree[n];
     } else {
       p = new((void*) gvp) GBRTree[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GBRTree;
     } else {
       p = new((void*) gvp) GBRTree;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GBRProjectDictLN_GBRTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__GBRProjectDict_169_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GBRTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new GBRTree(*(GBRTree*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) GBRTree(*(GBRTree*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__GBRProjectDictLN_GBRTree));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GBRTree G__TGBRTree;
static int G__GBRProjectDict_169_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GBRTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GBRTree*) (soff+(sizeof(GBRTree)*i)))->~G__TGBRTree();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GBRTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GBRTree*) (soff))->~G__TGBRTree();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__GBRProjectDict_169_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GBRTree* dest = (GBRTree*) G__getstructoffset();
   *dest = *(GBRTree*) libp->para[0].ref;
   const GBRTree& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* GBRForest */

/* GBRTree */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncGBRProjectDict {
 public:
  G__Sizep2memfuncGBRProjectDict(): p(&G__Sizep2memfuncGBRProjectDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncGBRProjectDict::*p)();
};

size_t G__get_sizep2memfuncGBRProjectDict()
{
  G__Sizep2memfuncGBRProjectDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceGBRProjectDict() {

   /* Setting up class inheritance */
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableGBRProjectDict() {

   /* Setting up typedef entry */
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<GBRTree>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEGBRTreecOallocatorlEGBRTreegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_reverse_iteratorlEvectorlEGBRTreecOallocatorlEGBRTreegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEGBRTreecOallocatorlEGBRTreegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__GBRProjectDictLN_reverse_iteratorlEvectorlEGBRTreecOallocatorlEGBRTreegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEGBRTreecOallocatorlEGBRTreegRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* GBRForest */
static void G__setup_memvarGBRForest(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GBRProjectDictLN_GBRForest));
   { GBRForest *p; p=(GBRForest*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fInitialResponse)-(long)(p)),100,0,0,-1,-1,-1,1,"fInitialResponse=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fTrees)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEGBRTreecOallocatorlEGBRTreegRsPgR),G__defined_typename("vector<GBRTree>"),-1,1,"fTrees=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GBRTree */
static void G__setup_memvarGBRTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__GBRProjectDictLN_GBRTree));
   { GBRTree *p; p=(GBRTree*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fCutIndices)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR),G__defined_typename("vector<unsigned char>"),-1,1,"fCutIndices=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fCutVals)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"fCutVals=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fLeftIndices)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"fLeftIndices=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fRightIndices)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<int>"),-1,1,"fRightIndices=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fResponses)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__GBRProjectDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,1,"fResponses=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarGBRProjectDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncGBRForest(void) {
   /* GBRForest */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GBRProjectDictLN_GBRForest));
   G__memfunc_setup("GBRForest",846,G__GBRProjectDict_168_0_1, 105, G__get_linked_tagnum(&G__GBRProjectDictLN_GBRForest), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GBRForest",846,G__GBRProjectDict_168_0_2, 105, G__get_linked_tagnum(&G__GBRProjectDictLN_GBRForest), -1, 0, 1, 1, 1, 0, "u 'GBRForest' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GBRForest", 972, G__GBRProjectDict_168_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GBRProjectDict_168_0_4, (int) ('u'), G__get_linked_tagnum(&G__GBRProjectDictLN_GBRForest), -1, 1, 1, 1, 1, 0, "u 'GBRForest' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGBRTree(void) {
   /* GBRTree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__GBRProjectDictLN_GBRTree));
   G__memfunc_setup("GBRTree",619,G__GBRProjectDict_169_0_1, 105, G__get_linked_tagnum(&G__GBRProjectDictLN_GBRTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GBRTree",619,G__GBRProjectDict_169_0_2, 105, G__get_linked_tagnum(&G__GBRProjectDictLN_GBRTree), -1, 0, 1, 1, 1, 0, "u 'GBRTree' - 11 - -", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GBRTree", 745, G__GBRProjectDict_169_0_3, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__GBRProjectDict_169_0_4, (int) ('u'), G__get_linked_tagnum(&G__GBRProjectDictLN_GBRTree), -1, 1, 1, 1, 1, 0, "u 'GBRTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncGBRProjectDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalGBRProjectDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcGBRProjectDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__GBRProjectDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR = { "vector<unsigned char,allocator<unsigned char> >" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_GBRForest = { "GBRForest" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_GBRTree = { "GBRTree" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_vectorlEGBRTreecOallocatorlEGBRTreegRsPgR = { "vector<GBRTree,allocator<GBRTree> >" , 99 , -1 };
G__linked_taginfo G__GBRProjectDictLN_reverse_iteratorlEvectorlEGBRTreecOallocatorlEGBRTreegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<GBRTree,allocator<GBRTree> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableGBRProjectDict() {
  G__GBRProjectDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR.tagnum = -1 ;
  G__GBRProjectDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__GBRProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__GBRProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GBRProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__GBRProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GBRProjectDictLN_GBRForest.tagnum = -1 ;
  G__GBRProjectDictLN_GBRTree.tagnum = -1 ;
  G__GBRProjectDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__GBRProjectDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__GBRProjectDictLN_vectorlEGBRTreecOallocatorlEGBRTreegRsPgR.tagnum = -1 ;
  G__GBRProjectDictLN_reverse_iteratorlEvectorlEGBRTreecOallocatorlEGBRTreegRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableGBRProjectDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_vectorlEunsignedsPcharcOallocatorlEunsignedsPchargRsPgR);
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_GBRForest),sizeof(GBRForest),-1,263936,(char*)NULL,G__setup_memvarGBRForest,G__setup_memfuncGBRForest);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_GBRTree),sizeof(GBRTree),-1,263936,(char*)NULL,G__setup_memvarGBRTree,G__setup_memfuncGBRTree);
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_vectorlEGBRTreecOallocatorlEGBRTreegRsPgR);
   G__get_linked_tagnum_fwd(&G__GBRProjectDictLN_reverse_iteratorlEvectorlEGBRTreecOallocatorlEGBRTreegRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupGBRProjectDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupGBRProjectDict()");
  G__set_cpp_environmentGBRProjectDict();
  G__cpp_setup_tagtableGBRProjectDict();

  G__cpp_setup_inheritanceGBRProjectDict();

  G__cpp_setup_typetableGBRProjectDict();

  G__cpp_setup_memvarGBRProjectDict();

  G__cpp_setup_memfuncGBRProjectDict();
  G__cpp_setup_globalGBRProjectDict();
  G__cpp_setup_funcGBRProjectDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncGBRProjectDict();
  return;
}
class G__cpp_setup_initGBRProjectDict {
  public:
    G__cpp_setup_initGBRProjectDict() { G__add_setup_func("GBRProjectDict",(G__incsetup)(&G__cpp_setupGBRProjectDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initGBRProjectDict() { G__remove_setup_func("GBRProjectDict"); }
};
G__cpp_setup_initGBRProjectDict G__cpp_setup_initializerGBRProjectDict;

